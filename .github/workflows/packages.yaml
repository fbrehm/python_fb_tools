---

name: "Building OS packages."

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - '**'
      - '!dev-**'
      - '!dev/**'
      - '!hf**'
    tags:
      - '**'

env:
  DEBFULLNAME: 'Frank Brehm'
  DEBEMAIL: 'frank@brehm-online.com'
  GITREF: ${{ github.ref }}
  NOTIFY_ADDRESS: 'frank@brehm-online.com,frank.brehm@pixelpark.com'
  PKG_NAME: 'fb_tools'
  SENDER_ADDRESS: 'Frank Brehm <frank@brehm-online.com>'
  SMTP_SERVER_ADDRESS: 'mail.uhu-banane.net'
  SMTP_SERVER_PORT: 587
  USED_TIMEZONE: 'Europe/Berlin'

jobs:

  test:
    runs-on: ubuntu-latest
    name: Executing Python tests
    strategy:
      fail-fast: false
      matrix:
        python_version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    container: python:${{ matrix.python_version }}
    steps:
      - uses: actions/checkout@v2
      - name: Show Environment
        run: python --version
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/install-pip-modules
      - name: Install PyTest with pip
        run: |
          pip install --upgrade --upgrade-strategy eager pytest
          pip list --format columns
      - name: Executing PyTest
        run: pytest --verbose

  linter:
    runs-on: ubuntu-latest
    name: Executing Linters
    container: python:3.9
    env:
      FLAKE8_MAX_LINE_LENGTH: 99
      FLAKE8_MAX_COMPLEXITY: 20
      FLAKE8_IGNORE_ERRORS: 'E226,E302,E41,E402'
    needs:
      - test
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/install-pip-modules
      - name: Install shellcheck and yamllint
        shell: bash
        run: apt install --yes shellcheck yamllint
      - name: Install flake8 and pylint
        shell: bash
        run: |
          pip install --upgrade --upgrade-strategy eager flake8 pylint
          pip list --format columns
      - name: "Checking module version against tag."
        shell: bash
        run: |
          MODULE_VERSION=$( cat lib/fb_tools/__init__.py | grep -P '^__version__(\s|=)' | sed -e "s/^[^'\"]*['\"]//"  -e "s/['\"][ 	]*\$//" )
          echo "Module version: '${MODULE_VERSION}'"
          if echo "${GITREF}" | grep -q -P '^refs/tags/' ; then
              TAG_VERSION=$( echo "${GITREF}" | sed -e 's|^refs/tags/||' )
              if [[ "${MODULE_VERSION}" == "${TAG_VERSION}" ]] ; then
                  echo "Tag and module version '${TAG_VERSION}' are okay."
              else
                  echo "Tag '${TAG_VERSION}' does not match module version '${MODULE_VERSION}'" >&2
                  exit 5
              fi
          fi
      - name: Execute Flake 8
        shell: bash
        run: |
          flake8 --max-line-length=$FLAKE8_MAX_LINE_LENGTH --max-complexity=$FLAKE8_MAX_COMPLEXITY --ignore=$FLAKE8_IGNORE_ERRORS bin lib
      - name: Execute Shellcheck
        shell: bash
        run: >
          shellcheck -x compile-xlate-msgs.sh test.py-*.sh test.rc test/call_script.sh test/call_sleep.sh update-env.sh xtract-xlate-msgs.sh
      - name: Execute Yamllint
        shell: bash
        run: yamllint -c yamllint.yaml .gitlab-ci.yml

  build_debian_sources:
    runs-on: ubuntu-latest
    name: Building Debian Source Packages
    # if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || startsWith( github.ref, 'refs/tags/' ) }}
    container: debian:bullseye
    needs:
      - linter
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/debian-install-buildenv
      - name: Debian build
        run: |
          echo "y" | debuild -S -i -us -uc
          ls -lA --color=always ..
          mkdir -pv debian/pkgs/src
          mv -vi ../*.dsc ../*.tar.* ../*.build* ../*.changes debian/pkgs/src
          ls -lA --color=always debian/pkgs/*/*
      - name: 'Upload Source Package'
        uses: actions/upload-artifact@v2
        with:
          name: debian_sources
          path: debian/pkgs/*/*
          retention-days: 15

  build_debian_bin:
    runs-on: ubuntu-latest
    name: Building Debian Binary Packages
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || startsWith( github.ref, 'refs/tags/' ) }}
    needs:
      - linter
    strategy:
      fail-fast: false
      matrix:
        include:
          - distributor: 'Debian'
            os_codename: 'buster'
            os_release: '10'
            container: 'debian:buster'
            version_prefix: 'deb10'
            compat: '11'
          - distributor: 'Debian'
            os_codename: 'bullseye'
            os_release: '11'
            container: 'debian:bullseye'
            version_prefix: 'deb11'
            compat: '12'
          - distributor: 'Ubuntu'
            os_codename: 'bionic'
            os_release: '18.04'
            container: 'ubuntu:bionic'
            version_prefix: 'ubuntu18.04'
            compat: '11'
          - distributor: 'Ubuntu'
            os_codename: 'focal'
            os_release: '20.04'
            container: 'ubuntu:focal'
            version_prefix: 'ubuntu20.04'
            compat: '12'
    env:
      COMPAT: ${{ matrix.compat }}
      DISTRIBUTOR: ${{ matrix.distributor }}
      OS_CODENAME: ${{ matrix.os_codename }}
      OS_RELEASE: ${{ matrix.os_release }}
      VERSION_PREFIX: ${{ matrix.version_prefix }}
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: Setting timezone
        if: ${{ matrix.distributor == 'Ubuntu' }}
        run: |
          echo "Setting system timezone to ${USED_TIMEZONE} ..."
          ln -fvs /usr/share/zoneinfo/${USED_TIMEZONE} /etc/localtime
          export DEBIAN_FRONTEND=noninteractive
      - uses: ./.github/actions/prepare-debian-container
      - uses: ./.github/actions/debian-install-buildenv
      - name: Updating Changelog
        run: |
          export PKG_VERSION=$( ./get-debian-version )
          export BUILD_VERSION="${PKG_VERSION}+${VERSION_PREFIX}"
          BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"
          echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"
          debchange --newversion "${BUILD_VERSION}" --force-bad-version --distribution "${OS_CODENAME}" --urgency medium "Build for ${DISTRIBUTOR} ${OS_RELEASE} - ${OS_CODENAME}"
          head -n 5 debian/changelog
      - name: Debian build
        run: |
          echo "Setting debian/compat to ${COMPAT}"
          echo "${COMPAT}" > debian/compat
          echo "y" | debuild -b -i -us -uc
          ls -lA --color=always ..
          mkdir -pv debian/pkgs/${VERSION_PREFIX}
          mv -vi ../*.deb ../*.build* debian/pkgs/${VERSION_PREFIX}
          ls -lA --color=always debian/pkgs/*/*
      - name: 'Upload Binary Package'
        uses: actions/upload-artifact@v2
        with:
          name: debian_bin_pkgs_${{ matrix.version_prefix }}
          path: debian/pkgs/*/*
          retention-days: 15

  deploy_to_pypi:
    runs-on: ubuntu-latest
    name: "Deployment of the Python package to PyPi"
    needs:
      - linter
      # - 'build_debian_sources'
      # - 'build_debian_bin'
      # - 'build_rpm'
    steps:
      - uses: actions/checkout@v2
      - name: Update all packages
        shell: bash
        run: |
          apt update --yes
          apt list --upgradeable
          apt dist-upgrade --yes
      - name: Install locales and gettext
        shell: bash
        run: apt install --yes sudo locales gettext
      - name: Update Locales
        shell: bash
        run: |
          locale -a
          if test -f /etc/locale.gen; then
            echo "/etc/locale.gen:"
            grep -P -v '^\s*(#.*)?$' /etc/locale.gen || true; echo "<-- EOF"
          fi
          if grep 'en_US.UTF-8' /etc/locale.gen; then
            sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          else
            echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen
          fi
          if grep 'de_DE.UTF-8' /etc/locale.gen
            then sed -i -e 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
          else
            echo 'de_DE.UTF-8 UTF-8' >> /etc/locale.gen
          fi
          locale-gen
          locale -a
      - uses: actions/setup-python@v2
      - uses: casperdcl/deploy-pypi@v2
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          pip: wheel -w dist/ --no-deps .
          build: clean sdist -d dist/ bdist_wheel -d dist/
          # only upload if a tag is pushed (otherwise just build & check)
          upload: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
      - name: Show results
        shell: bash
        run: ls -l --color=always dist/

  notify_success:
    runs-on: ubuntu-latest
    name: Sending Success message
    needs:
      - 'build_debian_sources'
      - 'build_debian_bin'
      # - 'build_rpm'
      # - 'deploy_to_pypi'
    steps:
      - name: Sending message
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: ${{ env.SMTP_SERVER_ADDRESS }}
          server_port: ${{ env.SMTP_SERVER_PORT }}
          # user credentials
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          # email subject
          subject: Github Workflow ${{ github.workflow }} of ${{ github.repository }} for ${{ github.ref }} was successful.
          # email body as text
          body: |
            Github Actions Workflow ${{ github.workflow }} of ${{ github.repository }} for ${{ github.ref }} was successful.
            Commiter: ${{ github.actor }}

            Cheers Frank
          # comma-separated string, send email to
          to: ${{ env.NOTIFY_ADDRESS }}
          # from email name
          from: ${{ env.SENDER_ADDRESS }}

# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list
