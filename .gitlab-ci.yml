---

variables:
  DEBFULLNAME: 'Frank Brehm'
  DEBEMAIL: 'frank@brehm-online.com'
  DEB_REPO_HOST: 'repo01.pixelpark.com'
  DEB_REPO_USER: 'rpm-repo'
  DEB_REPO_UPLOAD_DIR: '/srv/www/repo/Linux/debian/incoming'
  FB_REPOSERVER_URL: 'http://repo.uhu-banane.de'
  FB_REPOSERVER_GPGKEY_URL: 'http://repo.uhu-banane.de/public/repo.uhu-banane.de.gpg-key2.asc'
  FLAKE8_MAX_LINE_LENGTH: 99
  FLAKE8_MAX_COMPLEXITY: 20
  FLAKE8_IGNORE_ERRORS: 'E226,E302,E41,E402'
  NOTIFY_ADDRESS: 'frank@brehm-online.com frank.brehm@pixelpark.com'
  SENDER_ADDRESS: 'gitlab-ci@pixelpark.com'
  USED_TIMEZONE: 'Europe/Berlin'
  VERSION_PREFIX: 'unknown'
  YUM_REPO_GPG_ID: 'C0E73F70'
  YUM_REPO_GPG_PASSWD: 'secret'
  YUM_REPO_HOST: 'repo01.pixelpark.com'
  YUM_REPO_USER: 'rpm-repo'
  YUM_REPO_DIR_HTTP: '/Linux/yum/pixelpark'
  YUM_REPO_DIR: "/srv/www/repo${YUM_REPO_DIR_HTTP}"
  YUM_REPO_ADDSIGN_SCRIPT: '/home/rpm-repo/bin/rpm-addsign-wrapper.expect'
  YUM_REPO_GPG_KEY_PUB: 'nada'
  YUM_REPO_GPG_KEY_SEC: 'nada'

# .template_docker_job: &docker_job_definition
.docker_job_definition:
  before_script:
    - locale -a
    - apt update && apt install --yes sudo locales gettext
    - if test -f /etc/locale.gen; then echo "/etc/locale.gen:"; grep -P -v '^\s*(#.*)?$' /etc/locale.gen || true; echo "<-- EOF"; fi
    - if grep 'en_US.UTF-8' /etc/locale.gen; then sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen ; else echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen; fi
    - if grep 'de_DE.UTF-8' /etc/locale.gen; then sed -i -e 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen ; else echo 'de_DE.UTF-8 UTF-8' >> /etc/locale.gen; fi
    - locale-gen
    - locale -a
    - pip install --upgrade pip
    - pip install -r requirements.txt --upgrade --upgrade-strategy eager

.test-rules:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
    - if: $CI_COMMIT_BRANCH == "develop"
  tags:
    - docker
  script:
    - pip install --upgrade --upgrade-strategy eager pytest
    - pip list --format columns
    - pytest --verbose

test Python 3.6:
  extends:
    - .docker_job_definition
    - .test-rules
  image: python:3.6

test Python 3.7:
  extends:
    - .docker_job_definition
    - .test-rules
  image: python:3.7

test Python 3.8:
  extends:
    - .docker_job_definition
    - .test-rules
  image: python:3.8

test Python 3.9:
  extends:
    - .docker_job_definition
    - .test-rules
  image: python:3.9

test Python 3.10:
  extends:
    - .docker_job_definition
    - .test-rules
  image: python:3.10

Linter:
  extends:
    - .docker_job_definition
  image: python:3.9
  tags:
    - docker
  script:
    - apt install --yes shellcheck yamllint
    - pip install --upgrade --upgrade-strategy eager flake8 pylint
    - pip list --format columns
    - 'echo; echo -e "flake8 --max-line-length=${FLAKE8_MAX_LINE_LENGTH} --max-complexity=${FLAKE8_MAX_COMPLEXITY} --ignore=${FLAKE8_IGNORE_ERRORS} bin lib"'
    - flake8 --max-line-length=$FLAKE8_MAX_LINE_LENGTH --max-complexity=$FLAKE8_MAX_COMPLEXITY --ignore=$FLAKE8_IGNORE_ERRORS bin lib
    - 'echo; echo -e "shellcheck -x compile-xlate-msgs.sh test.py-*.sh test.rc test/call_script.sh test/call_sleep.sh update-env.sh xtract-xlate-msgs.sh"'
    - shellcheck -x compile-xlate-msgs.sh test.py-*.sh test.rc test/call_script.sh test/call_sleep.sh update-env.sh xtract-xlate-msgs.sh
    - 'echo; echo -e "yamllint -c yamllint.yaml .gitlab-ci.yml .github"'
    - yamllint -c yamllint.yaml .gitlab-ci.yml
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
    - if: $CI_COMMIT_BRANCH == "develop"
  needs:
    - 'test Python 3.6'
    - 'test Python 3.7'
    - 'test Python 3.8'
    - 'test Python 3.9'
    - 'test Python 3.10'

.pkg-build-rules:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
  tags:
    - docker
  needs:
    - 'Linter'

.build-debian-pkg:
  before_script:
    - hostname -f
    - whoami
    - pwd
    - locale -a
    - apt update
    - apt dist-upgrade --yes --no-install-recommends
    - apt install --yes --no-install-recommends curl
    - 'echo; echo "Importing GPG key from ${FB_REPOSERVER_GPGKEY_URL} ..."'
    - mkdir --verbose --parents /etc/apt/trusted.gpg.d
    - 'curl --silent "${FB_REPOSERVER_GPGKEY_URL}" >/etc/apt/trusted.gpg.d/fb-repo.keyring.asc'
    - ls -l --color=always /etc/apt/trusted.gpg.d/
    - mkdir --verbose --parents /etc/apt/sources.list.d
    - echo; echo "Creating /etc/apt/sources.list.d/fbrehm.list ..."
    - 'echo "deb	${FB_REPOSERVER_URL}/${DISTRIBUTOR}/${OS_CODENAME}		./" >/etc/apt/sources.list.d/fbrehm.list'
    - echo; echo "Content of /etc/apt/sources.list.d/fbrehm.list:"; cat /etc/apt/sources.list.d/fbrehm.list
    - echo; apt update
    - >
      apt install --yes --no-install-recommends sudo locales gettext build-essential
      devscripts fakeroot debhelper automake autotools-dev pkg-config help2man
      lsb-release ca-certificates libdistro-info-perl

.build-ubuntu-pkg:
  before_script:
    - hostname -f
    - whoami
    - pwd
    - locale -a
    - apt update
    - apt dist-upgrade --yes --no-install-recommends
    - 'echo "Setting system timezone to ${USED_TIMEZONE} ..."'
    - 'ln -fvs /usr/share/zoneinfo/${USED_TIMEZONE} /etc/localtime'
    - export DEBIAN_FRONTEND=noninteractive
    - apt install --yes --no-install-recommends curl
    - 'echo; echo "Importing GPG key from ${FB_REPOSERVER_GPGKEY_URL} ..."'
    - mkdir --verbose --parents /etc/apt/trusted.gpg.d
    - 'curl --silent "${FB_REPOSERVER_GPGKEY_URL}" >/etc/apt/trusted.gpg.d/fb-repo.keyring.asc'
    - ls -l --color=always /etc/apt/trusted.gpg.d/
    - mkdir --verbose --parents /etc/apt/sources.list.d
    - echo; echo "Creating /etc/apt/sources.list.d/fbrehm.list ..."
    - 'echo "deb	${FB_REPOSERVER_URL}/${DISTRIBUTOR}/${OS_CODENAME}		./" >/etc/apt/sources.list.d/fbrehm.list'
    - echo; echo "Content of /etc/apt/sources.list.d/fbrehm.list:"; cat /etc/apt/sources.list.d/fbrehm.list
    - echo; apt update
    - >
      apt install --yes --no-install-recommends sudo locales gettext build-essential
      devscripts fakeroot debhelper automake autotools-dev pkg-config help2man
      lsb-release ca-certificates libdistro-info-perl tzdata

build Debian Sources:
  variables:
    VERSION_PREFIX: 'deb11'
    DISTRIBUTOR: 'Debian'
    OS_RELEASE: '11'
    OS_CODENAME: 'bullseye'
  extends:
    - '.pkg-build-rules'
    - '.build-debian-pkg'
  image: debian:bullseye
  script:
    - >
      apt install --yes --no-install-recommends
      python3-all python3-babel python3-pip python3-setuptools python3-six
      python3-tz dh-python python3-fb-logging python3-requests-mock python3-wheel
    - 'export ODIR=$(pwd)'
    - 'export PKG_VERSION=$( ./get-debian-version )'
    - 'export PKG_RELEASE=$( ./get-debian-release )'
    - 'export BUILD_VERSION="${PKG_VERSION}"'
    - 'BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"'
    - 'echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"'
    - 'echo "y" | debuild -S -i -us -uc'
    - 'echo "${PKG_VERSION}-${PKG_RELEASE}" > .debian-version'
    - ls -lA --color=always ..
    - 'mkdir -pv debian/pkgs/src'
    - 'mv -vi ../*.dsc ../*.tar.* ../*.build* ../*.changes debian/pkgs/src'
    - ls -lA --color=always debian/pkgs/*/*
  tags:
    - docker
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .debian-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - debian/pkgs/*/*
    expire_in: '1 week'

build binaries for Debian 10 Buster:
  variables:
    VERSION_PREFIX: 'deb10'
    DISTRIBUTOR: 'Debian'
    OS_RELEASE: '10'
    OS_CODENAME: 'buster'
  extends:
    - '.pkg-build-rules'
    - '.build-debian-pkg'
  image: debian:buster
  script:
    - 'echo "Setting debian/compat to 11"'
    - 'echo "11" > debian/compat'
    - >
      apt install --yes --no-install-recommends
      python3-all python3-babel python3-pip python3-setuptools python3-six
      python3-tz dh-python python3-fb-logging python3-requests-mock python3-wheel
    - 'export ODIR=$(pwd)'
    - 'export PKG_VERSION=$( ./get-debian-version )'
    - 'export PKG_RELEASE=$( ./get-debian-release )'
    - 'export BUILD_VERSION="${PKG_VERSION}+${VERSION_PREFIX}"'
    - 'BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"'
    - 'echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"'
    - 'debchange --newversion "${BUILD_VERSION}" --force-bad-version --distribution "${OS_CODENAME}" --urgency medium "Build for ${DISTRIBUTOR} ${OS_RELEASE} - ${OS_CODENAME}"'
    - 'echo "y" | debuild -b -i -us -uc'
    - 'echo "${PKG_VERSION}-${PKG_RELEASE}" > .debian-version'
    - ls -lA --color=always ..
    - 'mkdir -pv debian/pkgs/src debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.deb debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.build* debian/pkgs/src'
    - ls -lA --color=always debian/pkgs/*/*
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .debian-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - debian/pkgs/*/*
    expire_in: '1 week'

build binaries for Debian 11 Bullseye:
  variables:
    VERSION_PREFIX: 'deb11'
    DISTRIBUTOR: 'Debian'
    OS_RELEASE: '11'
    OS_CODENAME: 'bullseye'
  extends:
    - '.pkg-build-rules'
    - '.build-debian-pkg'
  image: debian:bullseye
  script:
    - >
      apt install --yes --no-install-recommends
      python3-all python3-babel python3-pip python3-toml python3-setuptools python3-six
      python3-tz dh-python python3-fb-logging python3-requests-mock python3-wheel
    - 'export ODIR=$(pwd)'
    - 'export PKG_VERSION=$( ./get-debian-version )'
    - 'export PKG_RELEASE=$( ./get-debian-release )'
    - 'export BUILD_VERSION="${PKG_VERSION}+${VERSION_PREFIX}"'
    - 'BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"'
    - 'echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"'
    - 'debchange --newversion "${BUILD_VERSION}" --force-bad-version --distribution "${OS_CODENAME}" --urgency medium "Build for ${DISTRIBUTOR} ${OS_RELEASE} - ${OS_CODENAME}"'
    - 'echo "y" | debuild -b -i -us -uc'
    - 'echo "${PKG_VERSION}-${PKG_RELEASE}" > .debian-version'
    - ls -lA --color=always ..
    - 'mkdir -pv debian/pkgs/src debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.deb debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.build* debian/pkgs/src'
    - ls -lA --color=always debian/pkgs/*/*
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .debian-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - debian/pkgs/*/*
    expire_in: '1 week'

build binaries for Ubuntu 18.04 LTS Bionic Beaver:
  variables:
    VERSION_PREFIX: 'ubuntu18.04'
    DISTRIBUTOR: 'Ubuntu'
    OS_RELEASE: '18.04'
    OS_CODENAME: 'bionic'
  extends:
    - '.pkg-build-rules'
    - '.build-ubuntu-pkg'
  image: ubuntu:bionic
  script:
    - 'echo "Setting debian/compat to 11"'
    - 'echo "11" > debian/compat'
    - >
      apt install --yes --no-install-recommends
      python3-all python3-babel python3-pip python3-setuptools python3-six
      python3-tz dh-python python3-fb-logging python3-requests-mock python3-wheel
    - 'export ODIR=$(pwd)'
    - 'export PKG_VERSION=$( ./get-debian-version )'
    - 'export PKG_RELEASE=$( ./get-debian-release )'
    - 'export BUILD_VERSION="${PKG_VERSION}+${VERSION_PREFIX}"'
    - 'BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"'
    - 'echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"'
    - 'debchange --newversion "${BUILD_VERSION}" --force-bad-version --distribution "${OS_CODENAME}" --urgency medium "Build for ${DISTRIBUTOR} ${OS_RELEASE} - ${OS_CODENAME}"'
    - 'echo "y" | debuild -b -i -us -uc'
    - 'echo "${PKG_VERSION}-${PKG_RELEASE}" > .debian-version'
    - ls -lA --color=always ..
    - 'mkdir -pv debian/pkgs/src debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.deb debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.build* debian/pkgs/src'
    - ls -lA --color=always debian/pkgs/*/*
  tags:
    - docker
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .debian-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - debian/pkgs/*/*
    expire_in: '1 week'

build binaries for Ubuntu 20.04 LTS Focal Fossa:
  variables:
    VERSION_PREFIX: 'ubuntu20.04'
    DISTRIBUTOR: 'Ubuntu'
    OS_RELEASE: '20.04'
    OS_CODENAME: 'focal'
  extends:
    - '.pkg-build-rules'
    - '.build-ubuntu-pkg'
  image: ubuntu:focal
  script:
    - >
      apt install --yes --no-install-recommends
      python3-all python3-babel python3-pip python3-setuptools python3-six
      python3-tz dh-python python3-fb-logging python3-requests-mock python3-wheel
    - 'export ODIR=$(pwd)'
    - 'export PKG_VERSION=$( ./get-debian-version )'
    - 'export PKG_RELEASE=$( ./get-debian-release )'
    - 'export BUILD_VERSION="${PKG_VERSION}+${VERSION_PREFIX}"'
    - 'BUILDER="${DEBFULLNAME} <${DEBEMAIL}>"'
    - 'echo "Version to build: ${BUILD_VERSION} - Builder: ${BUILDER}"'
    - 'debchange --newversion "${BUILD_VERSION}" --force-bad-version --distribution "${OS_CODENAME}" --urgency medium "Build for ${DISTRIBUTOR} ${OS_RELEASE} - ${OS_CODENAME}"'
    - 'echo "y" | debuild -b -i -us -uc'
    - 'echo "${PKG_VERSION}-${PKG_RELEASE}" > .debian-version'
    - ls -lA --color=always ..
    - 'mkdir -pv debian/pkgs/src debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.deb debian/pkgs/${VERSION_PREFIX}'
    - 'mv -vi ../*.build* debian/pkgs/src'
    - ls -lA --color=always debian/pkgs/*/*
  tags:
    - docker
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .debian-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - debian/pkgs/*/*
    expire_in: '1 week'

build CentOS 7 with Python 3.6:
  variables:
    EL_MAJOR_VERSION: '7'
  extends:
    - '.pkg-build-rules'
  image: centos:7
  script:
    - 'if [[ ! -f bin-build/build-centos7-inner.sh ]] ; then echo "File bin-build/build-centos7-inner.sh not found"; false; fi'
    - bash -x bin-build/build-centos7-inner.sh
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .rpm-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - rpmdir/RPMS/*/*.rpm
      - rpmdir/SRPMS/*.src.rpm
    expire_in: '1 week'

build CentOS 8 with Python 3.8:
  variables:
    EL_MAJOR_VERSION: '8'
  extends:
    - '.pkg-build-rules'
  image: centos:8
  script:
    - 'if [[ ! -f bin-build/build-centos8-inner.sh ]] ; then echo "File bin-build/build-centos8-inner.sh not found"; false; fi'
    - bash -x bin-build/build-centos8-inner.sh
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .rpm-version
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - rpmdir/RPMS/*/*.rpm
      - rpmdir/SRPMS/*.src.rpm
    expire_in: '1 week'

.pkg-sign-rules:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - docker

Sign EL 7 packages:
  extends:
    - '.pkg-sign-rules'
  image: centos:7
  needs:
    - 'build CentOS 7 with Python 3.6'
  dependencies:
    - 'build CentOS 7 with Python 3.6'
  before_script:
    - yum clean all && yum makecache
    - 'for l in de_AT de_CH de_DE en_CA en_GB en_IE en_IN en_US ; do echo "${l}.utf8"; localedef --charmap UTF-8 --inputfile "${l}" "${l}.utf8"; done'
    - locale -a
    - 'export LC_ALL=en_US.utf8'
    - locale
    - yum makecache
    - yum --assumeyes upgrade
    - yum --assumeyes install rpm-sign tree expect
  script:
    - ls -lA rpmdir/RPMS/*/* rpmdir/SRPMS/*
    - 'echo -e "%_signature gpg\n%_gpg_name ${YUM_REPO_GPG_ID}" >$HOME/.rpmmacros'
    - echo "$YUM_REPO_GPG_KEY_PUB" | gpg --import
    - gpg --list-public-keys
    - echo "$YUM_REPO_GPG_KEY_SEC" | gpg --import
    - gpg --list-secret-keys
    - 'for f in $( find rpmdir -type f -iname "*.rpm" ) ; do echo "Signing ${f} ..."; ./rpm-addsign-wrapper.expect "${f}" "${YUM_REPO_GPG_PASSWD}"; done'
    - 'echo "${PKG_VERSION}-${PKG_RELEASE}" > .rpm-version'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - rpmdir/RPMS/*/*.rpm
      - rpmdir/SRPMS/*.src.rpm
    expire_in: '1 week'

Sign EL 8 packages:
  extends:
    - '.pkg-sign-rules'
  image: centos:7
  needs:
    - 'build CentOS 8 with Python 3.8'
  dependencies:
    - 'build CentOS 8 with Python 3.8'
  before_script:
    - yum clean all && yum makecache
    - 'for l in de_AT de_CH de_DE en_CA en_GB en_IE en_IN en_US ; do echo "${l}.utf8"; localedef --charmap UTF-8 --inputfile "${l}" "${l}.utf8"; done'
    - locale -a
    - 'export LC_ALL=en_US.utf8'
    - locale
    - yum makecache
    - yum --assumeyes upgrade
    - yum --assumeyes install rpm-sign tree expect
  script:
    - ls -lA rpmdir/RPMS/*/* rpmdir/SRPMS/*
    - 'echo -e "%_signature gpg\n%_gpg_name ${YUM_REPO_GPG_ID}" >$HOME/.rpmmacros'
    - echo "$YUM_REPO_GPG_KEY_PUB" | gpg --import
    - gpg --list-public-keys
    - echo "$YUM_REPO_GPG_KEY_SEC" | gpg --import
    - gpg --list-secret-keys
    - 'for f in $( find rpmdir -type f -iname "*.rpm" ) ; do echo "Signing ${f} ..."; ./rpm-addsign-wrapper.expect "${f}" "${YUM_REPO_GPG_PASSWD}"; done'
    - 'echo "${PKG_VERSION}-${PKG_RELEASE}" > .rpm-version'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - rpmdir/RPMS/*/*.rpm
      - rpmdir/SRPMS/*.src.rpm
    expire_in: '1 week'
  tags:
    - docker

Deploy packages Debian and Ubuntu:
  stage: deploy
  tags:
    - deploy_v2
  script:
    - hostname -f
    - whoami
    - pwd
    - ls -lA --color=always
    - tree -aQpugs debian/pkgs || true
    - 'echo -e "DEB_REPO_HOST: ${DEB_REPO_HOST}"'
    - 'echo -e "DEB_REPO_USER: ${DEB_REPO_USER}"'
    - 'echo -e "DEB_REPO_UPLOAD_DIR: ${DEB_REPO_UPLOAD_DIR}"'
    - 'scp -p -o StrictHostKeyChecking=no $( find debian/pkgs -type f | sort ) ${DEB_REPO_USER}@${DEB_REPO_HOST}:${DEB_REPO_UPLOAD_DIR}/'
  environment:
    name: production
  dependencies:
    - 'build Debian Sources'
    - 'build binaries for Debian 10 Buster'
    - 'build binaries for Debian 11 Bullseye'
    - 'build binaries for Ubuntu 18.04 LTS Bionic Beaver'
    - 'build binaries for Ubuntu 20.04 LTS Focal Fossa'
  only:
    - tags
  when: manual

.pkg-deploy-rules:
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true
  tags:
    - docker_v2
  script:
    - hostname -f
    - whoami
    - pwd
    - ls -lA --color=always
    - if test -d rpmdir ; then ls -lA --color=always rpmdir/RPMS/*/* rpmdir/SRPMS/*; fi
    - 'echo -e "YUM_REPO_USER: ${YUM_REPO_USER}"'
    - 'echo -e "YUM_REPO_HOST: ${YUM_REPO_HOST}"'
    - 'echo -e "YUM_REPO_DIR: ${YUM_REPO_DIR}"'
    - 'scp -p -o StrictHostKeyChecking=no rpmdir/RPMS/*/*.rpm ${YUM_REPO_USER}@${YUM_REPO_HOST}:${YUM_REPO_DIR}/${EL_MAJOR_VERSION}/'
    - 'ssh -o StrictHostKeyChecking=no ${YUM_REPO_USER}@${YUM_REPO_HOST} "cd ${YUM_REPO_DIR}/${EL_MAJOR_VERSION}/ && createrepo --update . && chmod -v a+x repodata && chmod -Rv a+r repodata"'
  after_script:
    - rm -rf rpmdir
  environment:
    name: production

Deploy packages EL7:
  extends:
    - '.pkg-deploy-rules'
  variables:
    EL_MAJOR_VERSION: '7'
  dependencies:
    - 'Sign EL 7 packages'

Deploy packages EL8:
  extends:
    - '.pkg-deploy-rules'
  variables:
    EL_MAJOR_VERSION: '8'
  dependencies:
    - 'Sign EL 8 packages'

.notify-rules:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
  tags:
    - docker_v2
  needs:
    - 'Deploy packages EL7'
    - 'Deploy packages EL8'

# Notify Success:
#   extends:
#     - '.notify-rules'
#   allow_failure: true
#   script: 'echo -e "Module ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} (${CI_COMMIT_REF_NAME}): all checks successful\nCommiter: ${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>" | mailx -s "Gitlab-CI: Python module fb_tools" -r "$SENDER_ADDRESS" $NOTIFY_ADDRESS'

# Notify Error:
#   extends:
#     - '.notify-rules'
#   allow_failure: true
#   when: on_failure
#   script: 'echo -e "Error in module ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} (${CI_COMMIT_REF_NAME})\nPlease check ${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}\n\nCommiter: ${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>" | mailx -s "Gitlab-CI error for Python module fb_tools" -r "$SENDER_ADDRESS" "$NOTIFY_ADDRESS"'

# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list
